//solution 1
// #include<bits/stdc++.h>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;
class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        const int MOD = 1e9 + 7;
        int n = nums.size();
        sort(nums.begin(), nums.end());

        // Precompute powers of 2
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; ++i)
            pow2[i] = (pow2[i - 1] * 2) % MOD;

        int res = 0;
        for (int i = 0; i < n; ++i) {
            int left = i, right = n - 1, j = -1;

            // Binary search for rightmost j such that nums[i] + nums[j] <= target
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (nums[i] + nums[mid] <= target) {
                    j = mid;
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if (j != -1 && j >= i)
                res = (res + pow2[j - i]) % MOD;
        }

        return res;
    }
};

//solution 2

class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        int mod=1e9+7;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<int> pow2(n,1);
        for(int i=1;i<n;i++){
            pow2[i]=(pow2[i-1]*2)%mod;
        }
        int left=0;
        int cnt=0;
        int right=n-1;
        while(left<=right){
            if(nums[left]+nums[right]<=target){
                cnt=(cnt+pow2[right-left])%mod;
                left++;
            }
            else right--;
        }
        return cnt;
    }
};