class Solution {
public:
    string str="";
    int kk;
    bool isSubsequence(string& t){
        string target="";
        for(int i=0;i<kk;i++){
            target+=t;
        }
        int i=0;
        for(char c:str){
            if(i<target.size() && c==target[i]) i++;
        }
        return i==target.size();
    }
    void backtrack(string& current,map<char,int>& usable,string& best,int maxLen){
        if(current.size()>maxLen) return;
        if(current.size()>best.size() || ((current.size()==best.size()) &&(current>best))){
            if(isSubsequence(current)){
            best=current;
            }
        }
        for(char ch='z';ch>='a';ch--){
            if(usable[ch]>0){
                current.push_back(ch);
                usable[ch]--;
                backtrack(current,usable,best,maxLen);
                usable[ch]++;
                current.pop_back();
            }
        }


    }
    string longestSubsequenceRepeatedK(string s, int k) {
        str=s;
        kk=k;
        map<char,int> freq;
        for(char c:s){
            freq[c]++;
        }
       map<char,int> usable;
       for(auto& [ch,num]:freq){
        if(num>=k){
            usable[ch]=num/k;
        }
       }
       string best="",current="";
       int maxLen=s.length()/k;
    backtrack(current,usable,best,maxLen);
    return best;
    }
    };