class Solution {
public:
    unordered_set<string> st;
    string possible;
    // bool found(string s,int n,int i){
    //     if(i==n){
    //         if(!st.count(s)){
    //             possible=s;
    //             return true;
    //         }
    //         else return false;
    //     }
    //     if(found(s,n,i+1)) return true;
           
    //         s[i]=(s[i]=='0')?'1':'0';
    //         if(found(s,n,i+1)) return true;
             
            
    //          return false;
    // }
    bool found=false;
    void backtrack(string s,int n,int i){
        if(i==n){
            if(!st.count(s)){
                possible=s;
                found=true;
                
            }
            return;
        }
        if(found) return ;
        s[i]='0';
        backtrack(s,n,i+1);
        if(!found){
            s[i]='1';
            backtrack(s,n,i+1);
        }
    }
    string findDifferentBinaryString(vector<string>& nums) {
        // for(string str:nums){
        //     st.insert(str);
        // }
        int n=nums[0].size();
        // string s(n,'0');
        // backtrack(s,n,0);
        // return possible;
        // found(s,n,0);
        // return possible;
        // int n=nums.size();
        // string result;
        // for(int i=0;i<n;i++){
            //we try to create a string that is different from all the strings present in nums ; so if the current string has atleast 1 character different from the other strings it is unique that is what we are doing making the current character of string different from the ith index of current string in this manner we get a unique string.
        //     char ch=(nums[i][i]=='1')?'0':'1';
        //     result.push_back(ch);
        // }
        //  return result;
        unordered_set<int> ss;
        for(string s:nums){
            ss.insert(stoi(s,nullptr,2));
        }
        string res;
        for(int i=0;i<=n;i++){
            if(!ss.count(i)){
                bitset<16> temp(i);
                res=temp.to_string();
            }
        }
        return res.substr(16-n,n);
        

    }
};